(define (for-each proc items)
  (if (null? items)
      ()
      ((lambda ()
               (proc (car items))
               (for-each proc (cdr items))
      ))
      )
  )


(define (count-leave items)
  (cond ((null? items) 0)
        ((pair? items)
         (+ (count-leave (car items))
            (count-leave (cdr items))
            )
         )
        (else 1)
      )
  )

(define (count-leave2 items)
  (cond ((null? items) 0)
        ((not (pair? items)) 1)
        (else (+ (count-leave (car items))
                 (count-leave (cdr items))
                 ))
      )
  )
